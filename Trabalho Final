// Classe para representar uma tarefa com prazo (entrega com data definida)
class TarefaPrazo {
  tipo: string = "prazo";
  descricao: string;
  nivelDificuldade: string;
  dataEntrega: string;
  concluida: boolean;

  constructor(desc: string, nivel: string, data: string) {
    this.descricao = desc;
    this.nivelDificuldade = nivel;
    this.dataEntrega = data;
    this.concluida = false;
  }

  mostrar(numeroTarefa: number): string {
    let status: string;
    if (this.concluida) {
      status = "✅";
    } else {
      status = "⌛";
    }
    return `${numeroTarefa + 1}. [Prazo] ${this.descricao} (${this.nivelDificuldade}) - Entrega: ${this.dataEntrega} - ${status}`;
  }
}

// Classe para representar uma tarefa de rotina
class TarefaRotina {
  tipo: string = "rotina";
  descricao: string;
  nivelDificuldade: string;
  diasSemana: string;
  horarioInicio: string;
  horarioFim: string;
  concluida: boolean;

  constructor(desc: string, nivel: string, dias: string, inicio: string, fim: string) {
    this.descricao = desc;
    this.nivelDificuldade = nivel;
    this.diasSemana = dias;
    this.horarioInicio = inicio;
    this.horarioFim = fim;
    this.concluida = false;
  }

  mostrar(numeroTarefa: number): string {
    let status: string;
    if (this.concluida) {
      status = "Concluída ✅";
    } else {
      status = "Pendente ⌛";
    }
    return `${numeroTarefa + 1}. [Rotina] ${this.descricao} (${this.nivelDificuldade}) - ${this.diasSemana} das ${this.horarioInicio} às ${this.horarioFim} - ${status}`;
  }
}

// Tipo genérico de tarefa
type Tarefa = TarefaPrazo | TarefaRotina;

// Banco de dados das tarefas
class TarefaBD {
  tarefas: Tarefa[] = [];

  adicionar(t: Tarefa): void {
    this.tarefas.push(t);
  }

  listar(): string {
    if (this.tarefas.length === 0) return "📭 Não há nenhuma tarefa cadastrada.";
    let resultado: string = "";
    for (let i = 0; i < this.tarefas.length; i++) {
      resultado += this.tarefas[i].mostrar(i);
      if (i < this.tarefas.length - 1) {
        resultado += "\n";
      }
    }
    return resultado;
  }

  concluir(pos: number): void {
    if (pos >= 0 && pos < this.tarefas.length) {
      this.tarefas[pos].concluida = true;
    }
  }

  remover(pos: number): void {
    if (pos >= 0 && pos < this.tarefas.length) {
      this.tarefas.splice(pos, 1);
    }
  }

  foco(): string {
    let tarefasPrazo: TarefaPrazo[] = [];
    let tarefasRotina: TarefaRotina[] = [];

    for (let i = 0; i < this.tarefas.length; i++) {
      let tarefa: Tarefa = this.tarefas[i];
      if (tarefa.tipo === "prazo" && !tarefa.concluida) {
        tarefasPrazo.push(tarefa as TarefaPrazo);
      } else if (tarefa.tipo === "rotina" && !tarefa.concluida) {
        tarefasRotina.push(tarefa as TarefaRotina);
      }
    }

    if (tarefasPrazo.length === 0 && tarefasRotina.length === 0) {
      return "🎉 Nenhuma pendência! Aproveite seu tempo.";
    }

    function formatarData(data: string): string {
      let partes: string[] = data.split("/");
      return `${partes[2]}-${partes[1]}-${partes[0]}`;
    }

    tarefasPrazo.sort((a, b) => {
      let dataA = formatarData(a.dataEntrega);
      let dataB = formatarData(b.dataEntrega);
      if (dataA > dataB) {
        return 1;
      } else {
        return -1;
      }
    });

    let foco: string = "🎯 FOCO:\n";

    if (tarefasPrazo.length > 0) {
      foco += "\n🗓️ Tarefas com prazo:\n";
      for (let i = 0; i < tarefasPrazo.length; i++) {
        let t = tarefasPrazo[i];
        let status = t.concluida ? "Concluída ✅" : "Pendente ⌛";

        if (i === 0) {
          foco += `[FOCO PRINCIPAL] : ${t.descricao} (${t.nivelDificuldade}) - Entrega: ${t.dataEntrega} - ${status}\n\n`;
        } else {
          foco += `- ${t.descricao} (${t.nivelDificuldade}) - Entrega: ${t.dataEntrega} - ${status}\n`;
        }
      }
    }

    if (tarefasRotina.length > 0) {
      foco += "\n🔁 Tarefas de rotina:\n";
      for (let i = 0; i < tarefasRotina.length; i++) {
        let t = tarefasRotina[i];
        let status = t.concluida ? "Concluída ✅" : "Pendente ⌛";
        foco += `- ${t.descricao} (${t.nivelDificuldade}) - ${t.diasSemana} das ${t.horarioInicio} às ${t.horarioFim} - ${status}\n`;
      }
    }

    return foco;
  }
}

function executarAgenda(): void {
  let bd = new TarefaBD();
  let sair = false;

  let nome: string | null = null;
  while (!nome || nome.trim() === "") {
    nome = prompt("Olá! Qual é o seu nome?");
    if (nome === null) {
      alert("Nome é obrigatório para usar a agenda.");
    } else {
      nome = nome.trim();
      if (nome === "") {
        alert("Por favor, digite um nome válido.");
      }
    }
  }

  alert(`Olá, ${nome}! Bem-vindo(a) à sua agenda.`);

  while (!sair) {
    let menu: string = `
🧠 FOCO FÁCIL - Usuário: ${nome}
1 - Adicionar tarefa
2 - Foco (Mostrar as pendências mais urgentes)!
3 - Listar histórico de tarefas
4 - Concluir tarefa
5 - Remover tarefa
6 - Sair
Escolha uma opção:`;

    let opcao = prompt(menu);
    if (opcao === null) break;

    if (opcao === "1") {
      let tipo = prompt("Qual o tipo de tarefa você deseja adicionar?\n1 - Com prazo\n2 - Rotina");

      if (tipo === "1") {
        let desc = prompt("Descrição da atividade:");
        let nivel = prompt("Dificuldade (leve, médio, difícil):");
        let data = prompt("Data de entrega (ex: 14/08/2025)");
        if (desc && nivel && data) {
          bd.adicionar(new TarefaPrazo(desc, nivel, data));
          alert(`✅ ${nome}, tarefa de prazo adicionada!`);
        }
      } else if (tipo === "2") {
        let desc = prompt("Descrição da rotina:");
        let nivel = prompt("Dificuldade (leve, médio, difícil):");
        let dias = prompt("Dias da semana (ex: seg, qua, sex):");
        let inicio = prompt("Horário de início (ex: 08:00):");
        let fim = prompt("Horário de fim (ex: 10:00):");
        if (desc && nivel && dias && inicio && fim) {
          bd.adicionar(new TarefaRotina(desc, nivel, dias, inicio, fim));
          alert(`✅ ${nome}, tarefa de rotina adicionada!`);
        }
      } else {
        alert("⚠️ Tipo inválido.");
      }
    }

    else if (opcao === "2") {
      alert(bd.foco());
    }

    else if (opcao === "3") {
      alert(`📋 ${nome}, suas tarefas:\n${bd.listar()}`);
    }

    else if (opcao === "4") {
      if (bd.tarefas.length === 0) {
        alert(`⚠️ ${nome}, nenhuma tarefa para concluir.`);
      } else {
        alert(`📋 ${nome}, tarefas:\n${bd.listar()}`);
        let pos = Number(prompt("Digite o número da tarefa a concluir:")) - 1;
        bd.concluir(pos);
        alert(`✅ ${nome}, tarefa marcada como concluída!`);
      }
    }

    else if (opcao === "5") {
      if (bd.tarefas.length === 0) {
        alert(`⚠️ ${nome}, nenhuma tarefa para remover.`);
      } else {
        alert(`📋 ${nome}, tarefas:\n${bd.listar()}`);
        let pos = Number(prompt("Digite o número da tarefa a remover:")) - 1;
        bd.remover(pos);
        alert(`🗑️ ${nome}, tarefa removida!`);
      }
    }

    else if (opcao === "6") {
      sair = true;
      alert(`👋 Até a próxima, ${nome}!`);
    }

    else {
      alert("⚠️ Opção inválida.");
    }
  }
}

executarAgenda();
