// Classe para representar uma tarefa com prazo (entrega com data definida)
class TarefaPrazo {
  tipo: string = "prazo";
  descricao: string;
  nivelDificuldade: string;
  dataEntrega: string;
  concluida: boolean;

  // Construtor: define os dados principais de uma tarefa com prazo
  constructor(desc: string, nivel: string, data: string) {
    this.descricao = desc;
    this.nivelDificuldade = nivel;
    this.dataEntrega = data;
    this.concluida = false; // Come√ßa como n√£o conclu√≠da
  }

  // Retorna uma string com as informa√ß√µes formatadas da tarefa
  mostrar(numeroTarefa: number): string {
    let status: string;
    if (this.concluida) {
      status = "‚úÖ";
    } else {
      status = "‚åõ";
    }
    return `${numeroTarefa + 1}. [Prazo] ${this.descricao} (${this.nivelDificuldade}) - Entrega: ${this.dataEntrega} - ${status}`;
  }
}

// Classe para representar uma tarefa de rotina
class TarefaRotina {
  tipo: string = "rotina";
  descricao: string;
  nivelDificuldade: string;
  diasSemana: string;
  horarioInicio: string;
  horarioFim: string;
  concluida: boolean;

  constructor(desc: string, nivel: string, dias: string, inicio: string, fim: string) {
    this.descricao = desc;
    this.nivelDificuldade = nivel;
    this.diasSemana = dias;
    this.horarioInicio = inicio;
    this.horarioFim = fim;
    this.concluida = false; // Come√ßa como n√£o conclu√≠da
  }

  // Retorna a tarefa formatada para exibi√ß√£o
  mostrar(numeroTarefa: number): string {
    let status: string;
    if (this.concluida) {
      status = "Conclu√≠da ‚úÖ";
    } else {
      status = "Pendente ‚åõ";
    }
    return `${numeroTarefa + 1}. [Rotina] ${this.descricao} (${this.nivelDificuldade}) - ${this.diasSemana} das ${this.horarioInicio} √†s ${this.horarioFim} - ${status}`;
  }
}

// Tipo gen√©rico que pode ser tanto TarefaPrazo quanto TarefaRotina
type Tarefa = TarefaPrazo | TarefaRotina;

// Classe respons√°vel por gerenciar as tarefas cadastradas
class TarefaBD {
  tarefas: Tarefa[] = [];

  // Adiciona uma tarefa ao array de tarefas
  adicionar(t: Tarefa): void {
    this.tarefas.push(t);
  }

  // Retorna uma string com todas as tarefas formatadas para exibi√ß√£o
  listar(): string {
    if (this.tarefas.length === 0) return "üì≠ N√£o h√° nenhuma tarefa cadastrada.";

    // Percorre todas as tarefas, chamando o m√©todo mostrar() de cada uma e construindo uma √∫nica string
    let resultado: string = "";
    for (let i = 0; i < this.tarefas.length; i++) {
      resultado += this.tarefas[i].mostrar(i);
      if (i < this.tarefas.length - 1) {
        resultado += "\n";
      }
    }
    return resultado;
  }

  // Marca a tarefa na posi√ß√£o pos como conclu√≠da
  concluir(pos: number): void {
    if (pos >= 0 && pos < this.tarefas.length) {
      this.tarefas[pos].concluida = true;
    }
  }

  // Remove a tarefa na posi√ß√£o pos do array de tarefas
  remover(pos: number): void {
    if (pos >= 0 && pos < this.tarefas.length) {
      this.tarefas.splice(pos, 1);
    }
  }

  // Mostra as tarefas mais urgentes (foco)
  foco(): string {
    let tarefasPrazo: TarefaPrazo[] = [];
    let tarefasRotina: TarefaRotina[] = [];

    // Separa as tarefas pendentes por tipo (prazo ou rotina)
    for (let i: number = 0; i < this.tarefas.length; i++) {
      let tarefa: Tarefa = this.tarefas[i];
      if (tarefa.tipo === "prazo" && !tarefa.concluida) {
        tarefasPrazo.push(tarefa as TarefaPrazo);
      } else if (tarefa.tipo === "rotina" && !tarefa.concluida) {
        tarefasRotina.push(tarefa as TarefaRotina);
      }
    }

    if (tarefasPrazo.length === 0 && tarefasRotina.length === 0) {
      return "üéâ Nenhuma pend√™ncia! Aproveite seu tempo.";
    }

    // Fun√ß√£o auxiliar para converter data do formato dd/mm/aaaa para aaaa-mm-dd para facilitar ordena√ß√£o
    function formatarData(data: string): string {
      let partes: string[] = data.split("/");
      return `${partes[2]}-${partes[1]}-${partes[0]}`;
    }

    // Ordena as tarefas com prazo pela data de entrega, do mais urgente ao menos urgente
    tarefasPrazo.sort((a: TarefaPrazo, b: TarefaPrazo) => {
      let dataA: string = formatarData(a.dataEntrega);
      let dataB: string = formatarData(b.dataEntrega);
      if (dataA > dataB){
        return 1;
      } else {
        return -1;
      }
    });

    let foco: string = "üéØ FOCO:\n";

    // Exibe tarefas com prazo
    if (tarefasPrazo.length > 0) {
      foco += "\nüóìÔ∏è Tarefas com prazo:\n";
      for (let i: number = 0; i < tarefasPrazo.length; i++) {
        let t: TarefaPrazo = tarefasPrazo[i];
        let status: string;
        if (t.concluida) {
          status = "Conclu√≠da ‚úÖ";
        } else {
          status = "Pendente ‚åõ";
        }

        if (i === 0) {
          foco += `[FOCO PRINCIPAL] : ${t.descricao} (${t.nivelDificuldade}) - Entrega: ${t.dataEntrega} - ${status}\n\n`;
        } else {
          foco += `- ${t.descricao} (${t.nivelDificuldade}) - Entrega: ${t.dataEntrega} - ${status}\n`;
        }
      }
    }

    // Exibe tarefas de rotina
    if (tarefasRotina.length > 0) {
      foco += "\nüîÅ Tarefas de rotina:\n";
      for (let i: number = 0; i < tarefasRotina.length; i++) {
        let t: TarefaRotina = tarefasRotina[i];
        let status: string;
        if (t.concluida) {
          status = "Conclu√≠da ‚úÖ";
        } else {
          status = "Pendente ‚åõ";
        }
        foco += `- ${t.descricao} (${t.nivelDificuldade}) - ${t.diasSemana} das ${t.horarioInicio} √†s ${t.horarioFim} - ${status}\n`;
      }
    }

    return foco;
  }
}

// Fun√ß√£o principal que executa o menu interativo do sistema
function executarAgenda(): void {
  let bd: TarefaBD = new TarefaBD();
  let sair: boolean = false;

  // Pede o nome do usu√°rio e valida para n√£o ficar vazio ou nulo
  let nome: string | null = null;
  while (!nome || nome.trim() === "") {
    nome = prompt("Ol√°! Qual √© o seu nome?");
    if (nome === null) {
      alert("Nome √© obrigat√≥rio para usar a agenda.");
    } else {
      nome = nome.trim();
      if (nome === "") {
        alert("Por favor, digite um nome v√°lido.");
      }
    }
  }

  alert(`Ol√°, ${nome}! Bem-vindo(a) √† sua agenda.`);

  while (!sair) {
    // Mostra o menu para o usu√°rio com o nome dele no t√≠tulo
    let menu: string = `
üß† FOCO F√ÅCIL - Usu√°rio: ${nome}
1 - Adicionar tarefa
2 - Foco (Mostrar as pend√™ncias mais urgentes)!
3 - Listar hist√≥rico de tarefas
4 - Concluir tarefa
5 - Remover tarefa
6 - Sair
Escolha uma op√ß√£o:`;

    let opcao: string | null = prompt(menu);
    if (opcao === null) break;

    if (opcao === "1") {
      let tipo: string | null = prompt("Qual o tipo de tarefa voc√™ deseja adicionar?\n1 - Com prazo\n2 - Rotina");

      if (tipo === "1") {
        let desc: string | null = prompt("Descri√ß√£o da atividade:");
        let nivel: string | null = prompt("Dificuldade (leve, m√©dio, dif√≠cil):");
        let data: string | null = prompt("Data de entrega (ex: 12/08/2025)");
        if (desc && nivel && data) {
          bd.adicionar(new TarefaPrazo(desc, nivel, data));
          alert(`‚úÖ ${nome}, tarefa de prazo adicionada!`);
        }
      } else if (tipo === "2") {
        let desc: string | null = prompt("Descri√ß√£o da rotina:");
        let nivel: string | null = prompt("Dificuldade (leve, m√©dio, dif√≠cil):");
        let dias: string | null = prompt("Dias da semana (ex: seg, qua, sex):");
        let inicio: string | null = prompt("Hor√°rio de in√≠cio (ex: 08:00):");
        let fim: string | null = prompt("Hor√°rio de fim (ex: 10:00):");
        if (desc && nivel && dias && inicio && fim) {
          bd.adicionar(new TarefaRotina(desc, nivel, dias, inicio, fim));
          alert(`‚úÖ ${nome}, tarefa de rotina adicionada!`);
        }
      } else {
        alert("‚ö†Ô∏è Tipo inv√°lido.");
      }
    }

    else if (opcao === "2") {
      alert(bd.foco());
    }

    else if (opcao === "3") {
      alert(`üìã ${nome}, suas tarefas:\n${bd.listar()}`);
    }

    else if (opcao === "4") {
      if (bd.tarefas.length === 0) {
        alert(`‚ö†Ô∏è ${nome}, nenhuma tarefa para concluir.`);
      } else {
        alert(`üìã ${nome}, tarefas:\n${bd.listar()}`);
        let pos: number = Number(prompt("Digite o n√∫mero da tarefa a concluir:")) - 1;
        bd.concluir(pos);
        alert(`‚úÖ ${nome}, tarefa marcada como conclu√≠da!`);
      }
    }

    else if (opcao === "5") {
      if (bd.tarefas.length === 0) {
        alert(`‚ö†Ô∏è ${nome}, nenhuma tarefa para remover.`);
      } else {
        alert(`üìã ${nome}, tarefas:\n${bd.listar()}`);
        let pos: number = Number(prompt("Digite o n√∫mero da tarefa a remover:")) - 1;
        bd.remover(pos);
        alert(`üóëÔ∏è ${nome}, tarefa removida!`);
      }
    }

    else if (opcao === "6") {
      sair = true;
      alert(`üëã At√© a pr√≥xima, ${nome}!`);
    }

    else {
      alert("‚ö†Ô∏è Op√ß√£o inv√°lida.");
    }
  }
}

// Executa o programa
executarAgenda();
